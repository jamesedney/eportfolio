from flask import Flask, render_template, request, redirect, url_for, session
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta, timezone
from io import BytesIO
import re
import pyqrcode
import os
import base64
import onetimepass

'''
The following lines of code initiate the application and create the
connection to the SQL database created on pythonanywhere. In later 
iterations, this configuration can be kept seperately from the source
code and encrypted, to ensure extra security.
'''
app = Flask(__name__)
app.config['SECRET_KEY'] = 'cybersecurity'
app.config["SQLALCHEMY_DATABASE_URI"] = "mysql+mysqlconnector://{username}:{password}@{hostname}/{databasename}".format(
        username="JamesEdney",
        password="C3rtaCito12345",
        hostname="JamesEdney.mysql.eu.pythonanywhere-services.com",
        databasename="JamesEdney$shopping_system",
    )
app.config["SQLALCHEMY_POOL_RECYCLE"] = 299
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config["PERMANENT_SESSION_LIFETIME"] = timedelta(minutes=5)
LOCKOUT_DURATION = timedelta(minutes=5)
db = SQLAlchemy(app)

'''
The User class, with functions to create a user and get the user's
details. There is a need to carry out the same functions on multiple
occassions, therefore this class prevents the need for repeating code.
'''
class User(db.Model):
    __tablename__ = 'accounts'
    id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(50), nullable=False)
    last_name = db.Column(db.String(50), nullable=False)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    email = db.Column(db.String(50), unique=True, nullable=False)
    totp_secret = db.Column(db.String(16), nullable=False)

    def __init__(self, id, first_name, last_name, username, password, email, totp_secret):
        self.id = id
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.password = password
        self.email = email
        self.totp_secret = totp_secret

    @staticmethod
    def createUser(first_name, last_name, username, password, email):
        password = hashPassword(password)
        totp_secret = base64.b32encode(os.urandom(10)).decode('utf-8')
        query = """
                 INSERT INTO accounts (id, first_name, last_name, username, password, email, totp_secret)
                 SELECT NULL, :first_name, :last_name, :username, :password, :email, :totp_secret
                 WHERE NOT EXISTS (SELECT * FROM accounts WHERE username = :username);
                """
        queryParameters = {
                 'first_name': first_name,
                 'last_name': last_name,
                 'username': username,
                 'password': password,
                 'email': email,
                 'totp_secret': totp_secret
            }
        executeFunction(query, queryParameters)
        
    @staticmethod
    def getUserDetails(username):
        query = " SELECT * FROM accounts WHERE username = :username;"
        result = db.session.execute(query, {'username': username}).fetchone()
        if result:
            return User(
                id=result['id'],
                first_name=result['first_name'],
                last_name=result['last_name'],
                username=result['username'],
                password=result['password'],
                email=result['email'],
                totp_secret=result['totp_secret'],
            )
        else:
            return None
    
    # this function verified the TOTP the user has inputted.
    @staticmethod
    def verifyTOTP(username, token):
        user = User.getUserDetails(username)
        if user is None:
            return False
        return onetimepass.valid_totp(token=token, secret=user.totp_secret)

'''
The Inventory class. Whilst not significantly used at the moment,
once the administrator functions have been added, the owner of
Colchester Groceries will be able to add items to the inventory
as well as amending items. This highlights the power of OOP.
'''
class Inventory(db.Model):
    __tablename__ = 'inventory'
    id = db.Column(db.Integer, primary_key=True)
    product_name = db.Column(db.String(100), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    price = db.Column(db.Float, nullable=False)

    def __init__(self, product_name, quantity, price):
        self.product_name = product_name
        self.quantity = quantity
        self.price = price

    @staticmethod
    def addProduct(product_name, quantity, price):
        new_product = Inventory(
            product_name=product_name,
            quantity=quantity,
            price=price
        )
        db.session.add(new_product)
        db.session.commit()

    @staticmethod
    def displayInventory():
        try:
            result = Inventory.query.all()
            if not result:
                return "Inventory is empty! Please come back later!"
            return result
        except Exception as e:
            print(f"Error fetching inventory: {e}")
            return None

'''
The below functions were created to stop repeating code
and to enhance readability.
'''
def executeFunction(query, queryParameters):
    try:
        db.session.execute(query, queryParameters)
        db.session.commit()
    except Exception as e:
        print(f"Error executing query: {e}")
        db.session.rollback()

def getQueryResults(query, queryParameters):
    try:
        result = db.session.execute(query, queryParameters).fetchone()
        return result
    except Exception as e:
        print(f"Error fetching query results: {e}")

# Hashing the password
def hashPassword(password):
    return generate_password_hash(password)

# This function checks the provided password's hash matches the one in the database.
def verifyPassword(storedPassword, providedPassword):
    return check_password_hash(storedPassword, providedPassword)

# incrementing the login attempts if incorrect credentials are provided.
def incorrectCredentials():
    if 'loginAttempts' not in session:
        session['loginAttempts'] = 1
    else:
        session['loginAttempts'] += 1
    session.modified = True
    if session['loginAttempts'] > 2:
        session['lockout_until'] = datetime.now(timezone.utc) + LOCKOUT_DURATION
        session.modified = True

'''
The login page. A lockout mechanism has been applied
where if incorrect credentials have been inputted three times,
the user will have to wait five minutes before trying again.
'''
@app.route('/colchestergroceries/', methods=['GET', 'POST'])
def login():

    msg = ''

    # check to see if a lockout timer has been applied
    if 'lockout_until' in session:
        if session['lockout_until'] > datetime.now(timezone.utc):
            # if a timer has been applied, prevent the user from inputting credentials
            return redirect(url_for('lockout'))

    if request.method == 'POST':
        inputUsername = request.form['username']
        token = request.form['otp']

        # check the supplied credentials against the database.
        userDetails = User.getUserDetails(inputUsername)
        totp = User.verifyTOTP(inputUsername, token)

        if userDetails is None or not totp:
            incorrectCredentials()
            msg = 'Incorrect username, password or token.'
            return render_template('index.html', msg=msg)
        else:
            password = verifyPassword(userDetails.password, request.form['password'])
            if userDetails.username == inputUsername and password and totp:
                session['loggedin'] = True
                session['id'] = userDetails.id
                session['username'] = userDetails.username
                # revert the login attempts back to 0 on successful login
                session['loginAttempts'] = 0
                session.modified = True
                return redirect(url_for('home'))
            else:
                incorrectCredentials()
                # an ambiguous error message to stop an attacker knowing where they went wrong.
                msg = 'Incorrect username, password or token.'

    return render_template('index.html', msg=msg)

'''
The lockout function. A timer is displayed with how long the
user has to wait before they have to login again.
'''
@app.route('/colchestergroceries/lockout/')
def lockout():
    # checking to see if the user is locked out. If not return to login screen.
    if 'lockout_until' not in session:
        return redirect(url_for('login'))
    lockoutRemaining = (session['lockout_until'] - datetime.now(timezone.utc)).seconds
    return render_template('Login_Lockout.html', lockoutRemaining=lockoutRemaining)

'''
The logout function, removing the user details from the 
session.
'''
@app.route('/colchestergroceries/logout')
def logout():

    session.pop('loggedin', None)
    session.pop('id', None)
    session.pop('username', None)
    session.modified = True
    return redirect(url_for('login'))

'''
This is how a user registers their account. A QR code is generated to provide
extra security and defence in depth. Google Authenticator was used in testing.
This was the preferred method for 2FA because it is free to implement and
there is no licensing cost. In later iterations, using an SMS verification service
such as Twilio will require licensing, however will prove more user friendly. 
'''
@app.route('/colchestergroceries/register', methods=['GET', 'POST'])
def register():

    msg = ''

    Fields = ['first_name', 'last_name', 'username', 'password', 'email']

    if request.method == 'POST' and all(field in request.form for field in Fields):
        first_name = request.form['first_name']
        last_name = request.form['last_name']
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']

        userDetails = User.getUserDetails(username)

        # Regular expressions used to ensure the app isn't vulnerable to SQLi
        if userDetails:
            msg = 'Account already exists!'
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            msg = 'Invalid email address!'
        elif not re.match(r'^[A-Za-z0-9]+$', username):
            msg = 'Username must contain only characters and numbers!'
        elif not username or not password or not email:
            msg = 'Please fill out the form!'
        else:
            User.createUser(first_name, last_name, username, password, email)
            msg = 'You have successfully registered!'
            session['username'] = username
            session.modified = True
            return redirect(url_for('qr'))

    elif request.method == 'POST':
        msg = 'Please fill out the form'

    return render_template('register.html', msg=msg)

'''
This route contains the QR code. As such, we need to
make sure the browser doesn't cache it due to the
potential sensitive data.
'''
@app.route('/colchestergroceries/qr')
def qr():
    if 'username' not in session:
        return redirect(url_for('register'))
    username = session['username']
    if username is None:
        return redirect(url_for('register'))
    return render_template('qr.html'), 200, {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'}
'''
Once the user has been registed, they will be directed here. This is where
they scan the QR code with their preferred authenticator app, which will
then provide them with a TOTP which refreshes every 30 seconds to login.
'''
@app.route('/qr_code')
def qr_code():
    if 'username' not in session:
        return redirect(url_for('register'))
    user = session['username']

    # this section creates the URI the authenticator app will use
    userDetails = User.getUserDetails(user)
    secret = userDetails.totp_secret
    app = 'ColchesterGroceries'
    totp_uri = f'otpauth://totp/{app}:{user}?secret={secret}&issuer={app}'

    # an extra security feature
    del session['username']
    session.modified = True

    url = pyqrcode.create(totp_uri)
    stream = BytesIO()
    url.svg(stream, scale=5)
    response = stream.getvalue()
    return response, 200, {
        'Content-Type': 'image/svg+xml',
        # we don't want the QR being cached and used by anyone else
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'}

'''
The home page for Colchester Groceries. If the user isn't logged in,
they will not be able to access this page. We can also pull the contents
of the inventory using the Inventory class function displayInventory()
'''
@app.route('/colchestergroceries/home', methods=['GET', 'POST'])
def home():
    if 'username' not in session:
        return redirect(url_for('login'))
    inventory = Inventory.displayInventory()
    username = session['username']
    return render_template('home.html', username=username, inventory=inventory)

'''
http://127.0.0.1:5000/colchester/groceries/profile
The user's profile page. More features will be added at a later date,
such as amending the user's details. This is discussed in the README
file.
'''
@app.route('/colchestergroceries/profile')
def profile():
    if 'loggedin' in session:
        account = User.getUserDetails(session['username'])
        return render_template('profile.html', account=account)
    return redirect(url_for('login'))
